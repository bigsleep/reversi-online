-----------------------------------------------------------------------------
20150125 やること

- クライアント
    - ゲーム部分
    - 観戦?
    - ページ遷移とか検討
    - jsライブラリ検討
- サーバー
    - ゲーム部分
    - 接続状態表示
    - 持ち時間とか

DONE - ログインしてたらログインボタン非表示
DONE - ルームに参加してたら別のルームに参加不可に
DONE - 退室
DONE - wsリトライしすぎてもつながらない時はどうしょうもない

DONE - 無駄に通信が多くなる
  ターン数を渡して変化なければ、変化なしのレスポンスを返す
  前のレスポンスを持っておいて比較する? 通信が成功したかどうかはわからなそう
  参加者、入力タイムアウトで終了などでもレスポンス変わる

DONE - 終了後の処理
いらなそう your turnとかの表示
DONE - leave, resign
- roomsの情報増やす
- heroku wakeup
- bot
- 長時間稼働させてみる
- wsがつながってる表示、切れた表示

DONE wsが切れた時に入力が無視される。入力保存してつながったら送る? 送信用のキューとかを作る?
DONE wsは状態を色々持つのでクラスにしたほうがいいのかも
DONE AIと対戦ボタン
DONE トップの表示を定期更新, setInterval?
DONE セッションの寿命を短くして認証API呼んだ時に延長する
     enter呼んだら延長することにした

DONE ユーザーに最終通信日時を入れる。接続されてないユーザーを部屋から消す
     一人目が参加してからの時間とかで解散させるのもありか
     部屋に入った時間を保存して時間立ったら追い出す

DONE leave失敗時に遷移させない
DONE indexでactiveでない場合でも自分が参加していればenter押せるようにする

保留 ずっとreadyにしないユーザーをたくさん作られると困る。
     どっちにしろbotとかでたくさん繋がれると遊べなくなるし
     そこまで考える必要ないか

---------------------------------------------------------------------------------
20150114 client

- 盤面表示
- 置けるマス表示
- 手番入力
-

---------------------------------------------------------------------------
20150111 worker

各部屋に一つ走らせる

- 部屋に二人で開始同意していればゲーム開始
- 部屋に一人でAI戦を希望する場合はAI戦で開始
- ゲーム終了したら少し待ってマッチング中にする


-----------------------------------------------------------------------
20150111 timeout

System.Timeout (timeout) baseの関数
Int -> IO a -> IO (Maybe a)

MVarでやりとりする場合はforkIOして時間になったらtryPutMVarするのでもよさそう

Room = Room
{
, state :: Reversi
, inputBlack :: (Int, Int) -> IO Bool
, inputWhite :: (Int, Int) -> IO Bool
}

----------------------------------------------------------------------------
20141231 ゲーム部分

websocketにする

ジャッジプロセスのようなのを動かす

ゲームの状態
- 先手後手の入力
- 盤面 (入力手からも分かるはず)
- 接続状況
- ターン数、現在どちらのターンか
- 入力期限

通信内容
- 同期、データ量は多くないので全入力手を渡してもいい
- 入力手、同期がずれるかもしれないのでターン数を渡すなど必要かも
- 降参
- 対戦結果
- 終わったらws通信を閉じる

通信が切れた時?
- コネクションの状態を見れば接続しているか分かる? 同期が一定時間呼ばれなかったら切れたとか
- 一手ごとの入力時間を過ぎると持ち時間を消費する。持ち時間がなくなったら負け
- 最初は時間制限はなしで作ってみる

-----------------------------------------------------------------
20141228 html

bootstrap CDNでもいいか

上の方にあるやつはnavbar
ログイン情報とか、ログインのリンクをつける
タイトル

exampleとかを真似して作る

ヘッダは? githubのリンクとか


---------------------------------------------------------------
20141228 静的ファイル

static以下に置けばいいか

ルーティングで*とかできないのが不便かも

正規表現?

とりあえずマッチしなかったらstaticから取るとかでいいか

---------------------------------------------------------------
20141220

get index
    部屋一覧とログインしていれば自分の情報

post login
    form
    まずはユーザー作らず、使い捨てのセッションで遊べる感じにする

post match
    form
    認証必要
    遷移はredirect?

post enter
    form
    認証必要
    遷移はredirect?

get room
    認証必要だけど自分がいない部屋が見れてもいい
    websocket?



---------------------------------------------------------------------
20141215 websocket

ルーティングしてからwebsocketsOrは問題ないっぽい
ボディを使ってなければいいのか
実験コード experiment/websockets3

ヘッダも取れるので多分セッションとかも普通に使えそう

---------------------------------------------------------------------
20141215 memo

html, javascriptで実験用クライアントを作る

マッチングのところまで

websocketも使う?

websocket使った時のルーティングはどうなるのか?

ルーティングのあとでwebsoketOrを使う?
websocketのときにルーティングする?
実験してみる


ユーザー登録はセッション開始ごとに
stmにユーザー情報を持つ

/

register

rooms

enter

match

update_match

登録画面、部屋一覧、マッチング画面

-------------------------------------------------------------------------------
20141214 test

- 並列で実行して人数が溢れない
  テストの時はマッチング前にスリープ入れたほうがいいかも

-----------------------------------------------------------------------------------
20141214 開始遷移

人数が揃って、同意するか、開始時間になったら開始

開始されたら

ゲーム用ルームを初期化する -> どのプロセス?

参加者はゲーム用のAPIを叩くようにする

セッションにユーザーの参加状態を持つ

クライアントも現在の状態を持ってるので
どのAPIを呼ぶか決まる

login
    まずはユーザー作らず、使い捨てのセッションで遊べる感じにする

rooms

match

enter

update_match

game

------------------------------------------------------------------------------------
20141214

オセロ、将棋、麻雀、などのマッチング

ルーム数は固定にする。

ルームの状態はSTM?

ルームの情報
- 参加者
- 部屋の状態 (マッチング, 開始, 終了など)
- 一言メッセージなど -> id同じで別状態にしたほうがいいか


プロセスがあったほうがいい?
なくてもいけるかも


参加人数が上限を超えないようにする


マッチングの処理
- 開いてる部屋を探す
- 入る
- 人数そろったら開始に遷移


MatchState
    - users
    - matchState

固定長TVarのarrayはTArrayでよさそう

オフラインとか復帰とか?


既に参加してたらその部屋に入ったほうが自然
参加者ID -> 部屋
を引きたい
セッションとかに保存する?
セッションも多分メモリ上に保存するので
問題なさそうな気がする。
部屋ID指定で復帰用の関数を作るか
全部舐めて参加してるか調べるのもそんなに遅くは無いかも


途中退室とか?
開始直前でなければ退室可能にする


人数が揃ったあと開始同意させる
全員同意したらスタートに遷移
